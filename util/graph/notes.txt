Graph construction solving orphaned nodes:

Graph {
  Ref[InnerGraph] graph;
  Ref[GraphBuilder] builder;
  ~Graph() {
    builder.MaybeGc();
  }
}

InnerNode {
  Ref[Node] node;
  bool alive;
}

InnerGraph {
  List[Ref[InnerNode]] nodes;
}

GraphBuilder {
  List[Ref[InnerNode]] nodes;
  List[Ref[InnerGraph]] inner_graphs;

  Graph Build() {
    new_graph = ConstructGraph(nodes);
    inner_graphs.append(new_graph);

    MaybeGc();

    return new_graph;
  }

  void MaybeGc() {
    MarkAllNodesUnalive();
    for (graph in inner_graphs) {
      graph.MarkNodesVisited();
    }

    ClearUnaliveNodeRefs();
  }
}

metafunctions:
  "zoom": append a transform of the form T_out(T1,T2) with T2<=T_out being a recursive connection.
  "graft": apply one graph to another by mapping nodes, e.g.:
           auto iter1 = graph1.find(Type::kTexture, {.constraints=kNotOutputValue});
           auto iter2 = graph2.find(Type::kTexture);
           graph1.graft(iter1, iter2);
  
