#ifndef PRESET_COMMON_MATH_SHH_
#define PRESET_COMMON_MATH_SHH_

const float kPi = 3.141592653589793;
const float kEpsilon = 1e-6;

vec2 unit_at_angle(float angle) { return vec2(cos(angle), sin(angle)); }

// Rotates a screen UV coordinate around the origin by `angle`.
vec2 rotate(vec2 screen_uv, float angle) {
  float c = cos(angle);
  float s = sin(angle);

  return vec2(c * screen_uv.x - s * screen_uv.y,
              s * screen_uv.x + c * screen_uv.y);
}

float angle(vec2 vec) { return atan(vec.y, vec.x); }

// Converts a normalized screen coordinate to a normalized texture coordinate.
vec2 screen_to_tex(vec2 screen_uv) { return (screen_uv + vec2(1., 1.)) * 0.5; }

// Zooms a screen UV coordinate by displacing it along its axis.
vec2 zoom(vec2 screen_uv, float zoom) { return screen_uv * zoom; }

// Zooms a screen UV coordinate by displacing it along its axis.
vec2 zoom_towards(vec2 screen_uv, float zoom, vec2 target) {
  return (screen_uv - target) * zoom + target;
}

// Returns the product of two sinusoids with the given coefficients of `arg`.
// Choosing the coefficients such that the number of decimal places required to
// represent their ratio is maximized will give a greater appearance of
// "randomness".
float sin_product(float coeff_a, float coeff_b, float arg) {
  return sin(coeff_a * arg) * sin(coeff_b * arg);
}

float map(float val, float in_low, float in_high, float out_low,
          float out_high) {
  return (val - in_low) / (in_high - in_low) * (out_high - out_low) + out_low;
}

vec4 shift_hue(vec4 color, float hue) {
  const vec3 k = vec3(0.57735, 0.57735, 0.57735);
  float cosine_hue = cos(hue);
  return vec4(color.xyz * cosine_hue + cross(k, color.xyz) * sin(hue) +
                  k * dot(k, color.xyz) * (1.0 - cosine_hue),
              color.w);
}

float sin_product_range(float coeff_a, float coeff_b, float min, float max,
                        float arg) {
  return sin_product(coeff_a, coeff_b, arg) * (max - min) + min;
}

// Computes the value of a 50% duty rectangular function with period `period`.
//
// The function has the following waveshape:
//
//        x+ -->
//
// val=1  |     ____
//        |    |    |
//        |----|----|----
//        |____|    |____
// val=-1 |
//
//        ^    ^    ^
//        |    |    |
//       x=0   |    |
//             |    |
// x=period/2 -+    +- x=period
//
float rect(float x, float period) {
  float interp = mod(x, period);
  return (interp > period / 2.0) ? 1.0 : -1.0;
}

vec4 blur_sample_texture(sampler2D tex, vec2 uv, ivec2 tex_size,
                         float blur_pix) {
  vec2 offset = vec2(blur_pix, blur_pix) / tex_size;
  vec2 offset_n = vec2(offset.x, -offset.y);
  return (texture2D(tex, uv + offset) + texture2D(tex, uv - offset) +
          texture2D(tex, uv + offset) + texture2D(tex, uv - offset)) /
         4.0f;
}

// Warps a UV coordinate by a kaleidoscopic effect.
vec2 uv_warp_kaleidoscope(vec2 uv, int num_divisions) {
  float uv_angle = angle(uv);
  float magnitude = length(uv);

  float fragment_angle = mod(uv_angle, kPi / num_divisions);

  if (fragment_angle > kPi / (num_divisions * 2)) {
    fragment_angle = (kPi / num_divisions) - fragment_angle;
  }
  return unit_at_angle(fragment_angle) * magnitude;
}

// Warps a UV coordinate by a spiral-bending effect.
vec2 uv_warp_spiral(vec2 uv, float aspect_ratio) {
  return rotate(uv, length(uv) * aspect_ratio);
}

#endif  // PRESET_COMMON_MATH_SHH_
